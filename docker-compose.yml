services:
  backend-quarkus:
    #    image: us-central1-docker.pkg.dev/workout-app-441723/workout-app/backend-quarku:latest
    #    image: peppap1g/backend-quarku:latest
    image: backend-quarkus:latest
    build:
      context: .
      dockerfile: Dockerfile
      target: backend-quarkus
    container_name: backend-quarkus
    platform: linux/amd64
    ports:
      - "8081:8081"
    environment:
      - DB_HOST=postgres-db
      - QUARKUS_DATASOURCE_USERNAME=postgres
      - QUARKUS_DATASOURCE_PASSWORD=LexLuthern246!!??
      - SERVER_PORT=8081
    depends_on:
      - postgres-db
    restart: always
    networks:
      - app-network

  svelte-frontend:
    #    image: us-central1-docker.pkg.dev/workout-app-441723/workout-app/svelte-frontend:latest
    #    image: peppap1g/svelte-frontend:latest
    image: svelte-frontend:latest
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend-final
    container_name: svelte-frontend
    platform: linux/amd64
    depends_on:
      - backend-quarkus
    environment:
      - NODE_ENV=production
    ports:
      - "8080:8080"
    command: ["npm", "run", "preview"]
    restart: always
    networks:
      - app-network
  flask-backend:
    #    image: us-central1-docker.pkg.dev/workout-app-441723/workout-app/flask-backend:latest
    #    image: peppap1g/flask-backend:latest
    image: flask-backend:latest
    build:
      context: .
      dockerfile: Dockerfile
      target: api-builder
    container_name: flask-backend
    platform: linux/amd64
    depends_on:
      - svelte-frontend
    environment:
      - NODE_ENV=production
    ports:
      - "8082:8082"
    restart: always
    networks:
      - app-network
  postgres-db:
    image: postgres-db:latest
    build:
      context: .
      dockerfile: Dockerfile
      target: postgres-with-backup
    container_name: postgres-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: LexLuthern246!!??
      POSTGRES_DB: automation

    ports:
      - "5432:5432"
    volumes:
      - ./backup.sql:/docker-entrypoint-initdb.d/backup.sql
    #      - mysql_data:/var/lib/mysql
    restart: always
    networks:
      - app-network


networks:
  app-network:
    driver: bridge