
apiVersion: v1
kind: Secret
metadata:
  name: db-creds
type: Opaque
stringData:
  username: postgres
  password: LexLuthern246!!??
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-quarkus # Renamed from spring-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend-quarkus # Updated label
  template:
    metadata:
      labels:
        app: backend-quarkus # Updated label
    spec:
      # If your image is private, add imagePullSecrets here
      imagePullSecrets:
         - name: my-registry-secret
      containers:
        - name: backend-quarkus # Renamed container
          # --- IMPORTANT: Update this image path ---
          image: us-central1-docker.pkg.dev/workout-app-441723/workout-app/backend-quarkus:latest # Replace with your Quarkus image
#          image: peppap1g/backend-quarkus:latest # Keep your image name, Kubernetes will look for it locally now
          imagePullPolicy: IfNotPresent # Or Never

          ports:
            - containerPort: 8081 # Same port as before
          resources: # Kept resources, adjust if needed for Quarkus
            requests:
              cpu: "50m"
              memory: "256Mi"
            limits:
              cpu: "200m" # Slightly increase CPU limit if needed
              memory: "512Mi" # Increase memory limit (e.g., to 2 Gigabytes)

          env:
            # MODIFIED: Point to PostgreSQL service name
            - name: DB_HOST
              value: postgres-db # Use the PostgreSQL Service name
            # MODIFIED: Quarkus standard JDBC URL property
            - name: QUARKUS_DATASOURCE_JDBC_URL
              value: jdbc:postgresql://postgres-db:5432/automation # Full JDBC URL for PostgreSQL
            # MODIFIED: Use new secret for postgres credentials
            - name: QUARKUS_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: db-creds # Use the new Secret name
                  key: username
            # MODIFIED: Use new secret for postgres credentials
            - name: QUARKUS_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-creds # Use the new Secret name
                  key: password
            # Optional: Quarkus usually defaults to 8080, but docker-compose specifies 8081
            - name: QUARKUS_HTTP_PORT # Standard Quarkus property for port
              value: "8081"
      restartPolicy: Always
---
# MODIFIED: Quarkus Backend Service (was spring-backend)
apiVersion: v1
kind: Service
metadata:
  name: backend-quarkus # Renamed from spring-backend
spec:
  selector:
    app: backend-quarkus # Updated selector
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask-backend
  template:
    metadata:
      labels:
        app: flask-backend
    spec:
      imagePullSecrets:
        - name: my-registry-secret
      containers:
        - name: flask-backend
          image: us-central1-docker.pkg.dev/workout-app-441723/workout-app/flask-backend:latest
#          image: peppap1g/flask-backend:latest # Keep your image name, Kubernetes will look for it locally now
          imagePullPolicy: IfNotPresent # Or Never

          ports:
            - containerPort: 8082
          resources:
            requests:
              cpu: "50m"   # Increase CPU request slightly
              memory: "512Mi" # Increase memory request significantly (e.g., 512 MiB)

            limits:
              cpu: "200m"   # Increase CPU limit
              memory: "1Gi" # Increase memory limit significantly (e.g., 1 GiB)

          env:
            - name: NODE_ENV
              value: production
            - name: API_KEY
              valueFrom:
                secretKeyRef:
                  name: instacart-creds # Name of the Secret created above
                  key: api-key


      restartPolicy: Always
---

apiVersion: v1
kind: Service
metadata:
  name: flask-backend
spec:
  selector:
    app: flask-backend
  ports:
    - protocol: TCP
      port: 8082
      targetPort: 8082
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: svelte-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: svelte-frontend
  template:
    metadata:
      labels:
        app: svelte-frontend
    spec:
      imagePullSecrets:
        - name: my-registry-secret
      containers:
        - name: svelte-frontend
          image: us-central1-docker.pkg.dev/workout-app-441723/workout-app/svelte-frontend:latest
#          image: peppap1g/svelte-frontend:latest # Keep your image name, Kubernetes will look for it locally now
          imagePullPolicy: IfNotPresent # Or Never

#          imagePullPolicy: Always
          resources:
            requests:
              cpu: "20m"
              memory: "6Mi"
            limits:
              cpu: "100m"
              memory: "256Mi"
          ports:
            - containerPort: 8080
          env:
            - name: NODE_ENV
              value: production
            - name: FIREBASE_API_KEY
              valueFrom:
                secretKeyRef:
                  name: firebase-config
                  key: VITE_FIREBASE_API_KEY
            - name: FIREBASE_AUTH_DOMAIN
              valueFrom:
                secretKeyRef:
                  name: firebase-config
                  key: VITE_FIREBASE_AUTH_DOMAIN
            - name: FIREBASE_PROJECT_ID
              valueFrom:
                secretKeyRef:
                  name: firebase-config
                  key: VITE_FIREBASE_PROJECT_ID
            - name: FIREBASE_STORAGE_BUCKET
              valueFrom:
                secretKeyRef:
                  name: firebase-config
                  key: VITE_FIREBASE_STORAGE_BUCKET
            - name: FIREBASE_MESSAGING_SENDER_ID
              valueFrom:
                secretKeyRef:
                  name: firebase-config
                  key: VITE_FIREBASE_MESSAGING_SENDER_ID
            - name: FIREBASE_APP_ID
              valueFrom:
                secretKeyRef:
                  name: firebase-config
                  key: VITE_FIREBASE_APP_ID
#          command: ["npm", "run", "preview"]
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: svelte-frontend
spec:
  selector:
    app: svelte-frontend
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000

---
# MODIFIED: PostgreSQL Deployment (was mysql-db)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-db # Renamed from mysql-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-db # Updated label
  template:
    metadata:
      labels:
        app: postgres-db # Updated label
    spec:
      # If your image is private, add imagePullSecrets here
      imagePullSecrets:
         - name: my-registry-secret
      containers:
        - name: postgres-db # Renamed container
          # --- IMPORTANT: Update this image path ---
          image: us-central1-docker.pkg.dev/workout-app-441723/workout-app/postgres-db:latest # Replace with your postgres image with backup included
          # Or use a standard image like postgres:latest if backup script handling is separate\
#          image: peppap1g/postgres-db:latest
          imagePullPolicy: Always
          resources: # Kept resources, adjust if needed for PostgreSQL
            requests:
              cpu: "50m"
              memory: "256Mi"
            limits:
              cpu: "150m"
              memory: "1Gi"
          ports:
            - containerPort: 5432 # PostgreSQL default port
          env:
            # MODIFIED: Use PostgreSQL standard env vars
            - name: POSTGRES_DB
              value: automation
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: db-creds # Use the new Secret name
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-creds # Use the new Secret name
                  key: password
          # MODIFIED: Volume mounts for data persistence and init script
#          volumeMounts:
##            - name: postgres-storage
##              mountPath: /var/lib/postgresql/data # Standard path for PostgreSQL data
#            - name: init-script-volume
#
#              # Mount for the backup.sql script
#              mountPath: /docker-entrypoint-initdb.d/backup.sql
#              subPath: backup.sql

      # Standard path for init scripts
#      volumes:
#        # MODIFIED: Define volume using the new PVC for the init script
#        - name: init-script-volume # Renamed volume reference
#          persistentVolumeClaim:
#            claimName: postgres-init-script-pvc # Use the PVC created above

      restartPolicy: Always
---
# MODIFIED: PostgreSQL Service (was mysql-db)
apiVersion: v1
kind: Service
metadata:
  name: postgres-db # Renamed from mysql-db
spec:
  selector:
    app: postgres-db # Updated selector
  ports:
    - protocol: TCP
      port: 5432 # PostgreSQL default port
      targetPort: 5432 # PostgreSQL container port

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: workout-app-ingress
  annotations:
    kubernetes.io/ingress.global-static-ip-name: workout-app-static-ip
    networking.gke.io/managed-certificates: workout-app-cert
spec:
  rules:
    - host: gainztrackers.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: svelte-frontend
                port:
                  number: 80
    - host: www.gainztrackers.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: svelte-frontend
                port:
                  number: 80