apiVersion: apps/v1
kind: Deployment
metadata:
  name: spring-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: spring-backend
  template:
    metadata:
      labels:
        app: spring-backend
    spec:
      imagePullSecrets:
        - name: my-docker-secret
      containers:
        - name: spring-backend
#          image: us-central1-docker.pkg.dev/workout-app-441723/workout-app/spring-backend:latest
          image: peppap1g/spring-backend:latest
          ports:
            - containerPort: 8081
          env:
            - name: DB_HOST
              value: mysql-db
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://mysql-db:3306/automation
            - name: SPRING_DATASOURCE_USERNAME
              value: root
            - name: SPRING_DATASOURCE
              value: LexLuthern246!!??
            - name: SERVER_PORT
              value: "8081"
          volumeMounts:
            - name: spring-backend-data
              mountPath: /main/backend-spring/src/main/resources/static
      volumes:
        - name: spring-backend-data  # This must match the volumeMounts above
          persistentVolumeClaim:
            claimName: spring-backend-data  # This must match the PVC you defined
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: spring-backend
spec:
  selector:
    app: spring-backend
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: react-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: react-frontend
  template:
    metadata:
      labels:
        app: react-frontend
    spec:
      imagePullSecrets:
        - name: my-docker-secret
      containers:
        - name: react-frontend
#          image: us-central1-docker.pkg.dev/workout-app-441723/workout-app/react-frontend:latest
          image: peppap1g/react-frontend:latest

          ports:
            - containerPort: 8080
          env:
            - name: NODE_ENV
              value: production
          command: ["npm", "run", "preview"]
          volumeMounts:
            - name: react-frontend-data
              mountPath: /usr/src/app
      volumes:
        - name: react-frontend-data  # This must match the volumeMounts above
          persistentVolumeClaim:
            claimName: react-frontend-data  # This must match the PVC you defined
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: react-frontend
spec:
  selector:
    app: react-frontend
  type: NodePort
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
      nodePort: 30000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql-db
  template:
    metadata:
      labels:
        app: mysql-db
    spec:
      containers:
        - name: mysql-db
          image: mysql:8.0
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: LexLuthern246!!??
            - name: MYSQL_DATABASE
              value: automation
          volumeMounts:
            - name: mysql-db-data
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-db-data  # This must match the volumeMounts above
          persistentVolumeClaim:
            claimName: mysql-db-data  # This must match the PVC you defined
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-db
spec:
  selector:
    app: mysql-db
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
