name: Docker Compose CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  PROJECT_ID: workout-app-441723
  REGION: us-central1
  REGISTRY: us-central1-docker.pkg.dev
  REPOSITORY: workout-app
  IMAGE_TAG: ${{ github.sha }}
  CLUSTER_NAME: workout-app-cluster

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          install_components: 'gke-gcloud-auth-plugin'

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Install Kompose
        run: |
          curl -L https://github.com/kubernetes/kompose/releases/download/v1.31.2/kompose-linux-amd64 -o kompose
          chmod +x kompose
          sudo mv ./kompose /usr/local/bin/kompose

      - name: Build & Push Images
        run: |
          docker compose build
          docker compose push

      - name: Convert Docker Compose to Kubernetes
        run: |
          kompose convert -f docker-compose.yaml -o k8s-manifests

      - name: Setup GKE Cluster
        run: |
          gcloud container clusters create-auto ${{ env.CLUSTER_NAME }} \
            --region ${{ env.REGION }} || true
          gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} \
            --region ${{ env.REGION }}

      - name: Create Secret
        run: |
          kubectl create secret generic app-secrets \
            --from-literal=MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }} \
            --dry-run=client -o yaml | kubectl apply -f -
#
      - name: Deploy to GKE
        run: |
          kubectl apply -f k8s-manifests

      - name: Get Service URL
        run: |
          echo "Waiting for LoadBalancer..."
          while [ -z $(kubectl get service react-frontend -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null) ]; do
            sleep 5
          done
          echo "Frontend available at: http://$(kubectl get service react-frontend -o jsonpath='{.status.loadBalancer.ingress[0].ip}'):8080"