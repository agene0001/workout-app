name: Deploy to GKE

on:
  push:
    branches:
      - master

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  GKE_CLUSTER: svelte-cluster
  GKE_ZONE: us-central1-a
  IMAGE_FRONTEND: svelte-frontend
  IMAGE_QUARKUS: backend-quarkus
  IMAGE_FLASK: flask-backend
  IMAGE_DB: postgres-db
  REGION: us-central1
  REPOSITORY: workout-app

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          export_environment_variables: true

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Configure Docker to use Google Cloud authentication
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet
      - name: Build images with Docker Compose
        run: |
          # Parse Firebase secret JSON into shell variables
          FIREBASE_CONFIG_JSON='${{ secrets.FIREBASE_CONFIG_JSON }}'

          # Use jq to parse the JSON and store key-value pairs in shell variables
          # Ensure jq is available (already assumed/checked)
          VITE_FIREBASE_API_KEY=$(echo "$FIREBASE_CONFIG_JSON" | jq -r '.VITE_FIREBASE_API_KEY')
          VITE_FIREBASE_AUTH_DOMAIN=$(echo "$FIREBASE_CONFIG_JSON" | jq -r '.VITE_FIREBASE_AUTH_DOMAIN')
          VITE_FIREBASE_PROJECT_ID=$(echo "$FIREBASE_CONFIG_JSON" | jq -r '.VITE_FIREBASE_PROJECT_ID')
          VITE_FIREBASE_STORAGE_BUCKET=$(echo "$FIREBASE_CONFIG_JSON" | jq -r '.VITE_FIREBASE_STORAGE_BUCKET')
          VITE_FIREBASE_MESSAGING_SENDER_ID=$(echo "$FIREBASE_CONFIG_JSON" | jq -r '.VITE_FIREBASE_MESSAGING_SENDER_ID')
          VITE_FIREBASE_APP_ID=$(echo "$FIREBASE_CONFIG_JSON" | jq -r '.VITE_FIREBASE_APP_ID')
          VITE_FIREBASE_MEASUREMENT_ID=$(echo "$FIREBASE_CONFIG_JSON" | jq -r '.VITE_FIREBASE_MEASUREMENT_ID')

          # Now run docker compose build, passing the variables as --build-arg
          # This explicitly passes the variables from the workflow shell into the Docker build environment
          docker compose build \
            --build-arg VITE_FIREBASE_API_KEY="$VITE_FIREBASE_API_KEY" \
            --build-arg VITE_FIREBASE_AUTH_DOMAIN="$VITE_FIREBASE_AUTH_DOMAIN" \
            --build-arg VITE_FIREBASE_PROJECT_ID="$VITE_FIREBASE_PROJECT_ID" \
            --build-arg VITE_FIREBASE_STORAGE_BUCKET="$VITE_FIREBASE_STORAGE_BUCKET" \
            --build-arg VITE_FIREBASE_MESSAGING_SENDER_ID="$VITE_FIREBASE_MESSAGING_SENDER_ID" \
            --build-arg VITE_FIREBASE_APP_ID="$VITE_FIREBASE_APP_ID" \
            --build-arg VITE_FIREBASE_MEASUREMENT_ID="$VITE_FIREBASE_MEASUREMENT_ID" \
            backend-quarkus flask-backend svelte-frontend # Specify services to build add  postgres-db if needed
      - name: Tag and push images
        run: |
          docker tag ${IMAGE_QUARKUS}:latest ${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE_QUARKUS}:latest
          docker tag ${IMAGE_FLASK}:latest ${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE_FLASK}:latest
          docker tag ${IMAGE_FRONTEND}:latest ${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE_FRONTEND}:latest
          docker push ${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE_QUARKUS}:latest
          docker push ${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE_FLASK}:latest
          docker push ${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE_FRONTEND}:latest
#                          docker tag ${IMAGE_DB}:latest ${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE_DB}:latest
#                docker push ${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE_DB}:latest

#      - name: Build images with Docker Compose
#        run: |
#          docker compose build backend-quarkus flask-backend svelte-frontend
      # NEW STEP: Clean up older images, keeping only the one tagged 'latest'
      - name: Clean up older images
        run: |
          # Install jq if it's not already available on the runner image
          sudo apt-get update && sudo apt-get install -y jq

          IMAGES_TO_CLEAN=(
            "${IMAGE_FRONTEND}"
            "${IMAGE_QUARKUS}"
            "${IMAGE_FLASK}"
             #"${IMAGE_DB}" # Uncomment if you uncomment the DB image elsewhere
          )

          for IMAGE_NAME in "${IMAGES_TO_CLEAN[@]}"; do
            FULL_IMAGE_PATH="${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE_NAME}"
            echo "Cleaning up old images for $FULL_IMAGE_PATH..."

            # List all image tags and digests in JSON format
            # Check if the list-tags command was successful before proceeding
            if ! IMAGE_INFO_JSON=$(gcloud container images list-tags "$FULL_IMAGE_PATH" --format='json'); then
                echo "Failed to list image tags for $FULL_IMAGE_PATH. Skipping cleanup for this image."
                echo "---"
                continue # Move to the next image
            fi

            # Use jq to find the digest of the image tagged 'latest'.
            # The '? // empty' handles cases where tags might be null or missing.
            LATEST_DIGEST=$(echo "$IMAGE_INFO_JSON" | jq -r '.[] | select(.tags[]? // empty == "latest") | .digest' 2>/dev/null)

            if [ -z "$LATEST_DIGEST" ]; then
              echo "No image found with 'latest' tag in the image list for $FULL_IMAGE_PATH. Skipping cleanup."
              echo "This might be the first push or the 'latest' tag is genuinely missing."
              echo "---"
              continue # Move to the next image if no 'latest' found
            fi

            echo "Digest of 'latest' image is: $LATEST_DIGEST"

            # Use jq to extract all unique digests from the JSON output
            ALL_DIGESTS=$(echo "$IMAGE_INFO_JSON" | jq -r '.[] | .digest' | sort -u)

            if [ -z "$ALL_DIGESTS" ]; then
               echo "No digests found for $FULL_IMAGE_PATH (unexpected if latest was found). Cleanup complete."
               echo "---"
               continue
            fi


            # Iterate through all digests and delete if not the latest
            echo "All unique digests found:"
            echo "$ALL_DIGESTS"
            echo "Checking digests for deletion..."

            DELETE_COUNT=0
            # Read digests line by line for robustness
            while IFS= read -r digest; do
              # Ensure digest is not empty and is not the latest digest
              if [ -n "$digest" ] && [ "$digest" != "$LATEST_DIGEST" ]; then
                echo "Deleting old image: $FULL_IMAGE_PATH@$digest"
                # Use || true to allow workflow to continue even if one deletion fails
                gcloud container images delete "$FULL_IMAGE_PATH@$digest" \
                  --quiet \
                  --force-delete-tags || true
                DELETE_COUNT=$((DELETE_COUNT + 1))
              elif [ "$digest" = "$LATEST_DIGEST" ]; then
                 echo "Keeping latest image: $FULL_IMAGE_PATH@$digest"
              # else # Skip empty lines from the list
              #   echo "Skipping empty line in digest list"
              fi
            done <<< "$ALL_DIGESTS" # Feed the variable into the while loop

            echo "Deleted $DELETE_COUNT older image versions for $FULL_IMAGE_PATH."
            echo "Cleanup complete for $FULL_IMAGE_PATH."
            echo "---"
          done


#      - name: Clean up old images
#        run: |
#          gcloud container images list-tags $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_FRONTEND --format='get(digest)' --filter='tag:latest' | xargs -I {} gcloud container images delete $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_FRONTEND@{} --quiet --force-delete-tags
#          gcloud container images list-tags $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_QUARKUS --format='get(digest)' --filter='tag:latest' | xargs -I {} gcloud container images delete $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_QUARKUS@{} --quiet --force-delete-tags
#          gcloud container images list-tags $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_FLASK --format='get(digest)' --filter='tag:latest' | xargs -I {} gcloud container images delete $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_FLASK@{} --quiet --force-delete-tags
#      #          gcloud container images list-tags $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_DB --format='get(digest)' --filter='tag:latest' | xargs -I {} gcloud container images delete $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_DB@{} --quiet --force-delete-tags

      - name: Create or Update Instacart Secret
        env:
          INSTACART_API_KEY: ${{ secrets.INSTACART_API_KEY }}
        run: |
          if [ -z "$INSTACART_API_KEY" ]; then
            echo "Error: INSTACART_API_KEY secret is not set in GitHub Secrets."
            exit 1
          fi
          kubectl create secret generic instacart-creds \
            --from-literal=api-key="$INSTACART_API_KEY" \
            --dry-run=client -o yaml | kubectl apply -f -
#      - name: Create Firebase Secret from JSON
#        run: |
#          echo '${{ secrets.FIREBASE_CONFIG_JSON }}' > firebase-config.json
#
#          VITE_FIREBASE_API_KEY=$(jq -r '.VITE_FIREBASE_API_KEY' firebase-config.json)
#          VITE_FIREBASE_AUTH_DOMAIN=$(jq -r '.VITE_FIREBASE_AUTH_DOMAIN' firebase-config.json)
#          VITE_FIREBASE_PROJECT_ID=$(jq -r '.VITE_FIREBASE_PROJECT_ID' firebase-config.json)
#          VITE_FIREBASE_STORAGE_BUCKET=$(jq -r '.VITE_FIREBASE_STORAGE_BUCKET' firebase-config.json)
#          VITE_FIREBASE_MESSAGING_SENDER_ID=$(jq -r '.VITE_FIREBASE_MESSAGING_SENDER_ID' firebase-config.json)
#          VITE_FIREBASE_APP_ID=$(jq -r '.VITE_FIREBASE_APP_ID' firebase-config.json)
#          VITE_FIREBASE_MEASUREMENT_ID=$(jq -r '.VITE_FIREBASE_MEASUREMENT_ID' firebase-config.json)
#
#          kubectl create secret generic firebase-secrets \
#          --from-literal=VITE_FIREBASE_API_KEY="$VITE_FIREBASE_API_KEY" \
#          --from-literal=VITE_FIREBASE_AUTH_DOMAIN="$VITE_FIREBASE_AUTH_DOMAIN" \
#          --from-literal=VITE_FIREBASE_PROJECT_ID="$VITE_FIREBASE_PROJECT_ID" \
#          --from-literal=VITE_FIREBASE_STORAGE_BUCKET="$VITE_FIREBASE_STORAGE_BUCKET" \
#          --from-literal=VITE_FIREBASE_MESSAGING_SENDER_ID="$VITE_FIREBASE_MESSAGING_SENDER_ID" \
#          --from-literal=VITE_FIREBASE_APP_ID="$VITE_FIREBASE_APP_ID" \
#          --from-literal=VITE_FIREBASE_MEASUREMENT_ID="$VITE_FIREBASE_MEASUREMENT_ID" \
#          --dry-run=client -o yaml | kubectl apply -f -


      - name: Deploy to GKE
        run: |
          kubectl apply -f k8s-manifest.yaml
          kubectl apply -f k8s-networking.yaml

      - name: Force rollout restart
        if: success()
        run: |
          echo "Forcing rollout restart to pick up latest images..."
          kubectl rollout restart deployment/svelte-frontend
          kubectl rollout restart deployment/backend-quarkus
          kubectl rollout restart deployment/flask-backend
          kubectl rollout restart deployment/postgres-db
#
      - name: Wait for deployments to stabilize
        run: |
          kubectl rollout status deployment/svelte-frontend
          kubectl rollout status deployment/backend-quarkus
          kubectl rollout status deployment/flask-backend
          kubectl rollout status deployment/postgres-db


      - name: Get service URLs
        # Use always() in case previous steps failed, still try to get info
        if: always()
        run: |
          # Use --namespace if your services are not in the default namespace
          FRONTEND_IP=$(kubectl get service svelte-frontend -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -z "$FRONTEND_IP" ]; then
             echo "Frontend service IP not yet available or service not found."
             echo "Check kubectl get service svelte-frontend for status."
          else
             echo "Frontend service available at: http://$FRONTEND_IP"
          fi