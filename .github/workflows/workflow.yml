name: Deploy to GKE

on:
  push:
    branches:
      - master

env:
  PROJECT_ID: workout-app-441723
  GKE_CLUSTER: react-cluster
  GKE_ZONE: us-central1-a
  IMAGE_FRONTEND: react-frontend
  IMAGE_BACKEND: spring-backend
  REGION: us-central1
  REPOSITORY: workout-app
jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
#
      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}  # No quotes
          export_environment_variables: true  # Export credentials to environment variables

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          project_id: ${{ env.PROJECT_ID }}  # Added project_id
   # Configure Docker to use the gcloud command-line tool as a credential helper

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
      # Get the GKE credentials so we can deploy to the cluster
      - name: Clean up old images
        run: |
          gcloud container images list-tags $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_FRONTEND --format='get(digest)' --filter='tags:latest' | xargs -I {} gcloud container images delete $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_FRONTEND@{} --quiet --force-delete-tags
  
          gcloud container images list-tags $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_BACKEND --format='get(digest)' --filter='tags:latest' | xargs -I {} gcloud container images delete $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_BACKEND@{} --quiet --force-delete-tags
          
          # Delete all remaining images (ignores timestamp)
          gcloud container images list-tags $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_FRONTEND --format='get(digest)' | xargs -I {} gcloud container images delete $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_FRONTEND@{} --quiet --force-delete-tags
          
          gcloud container images list-tags $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_BACKEND --format='get(digest)' | xargs -I {} gcloud container images delete $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_BACKEND@{} --quiet --force-delete-tags
      - name: Configure Docker to use Google Cloud authentication
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet
      - name: Build and Push Docker Images
        run: |-
          # Enable BuildKit for multi-platform builds
          export DOCKER_BUILDKIT=1

          # Create a new builder if it doesn't exist
          docker buildx create --name multiplatform-builder --use || true
          docker buildx use multiplatform-builder

          # Build and push Spring Backend
          echo "Building and pushing Spring Backend..."
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag "${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/spring-backend:latest" \
            --target backend-builder \
            --push \
            .

          # Build and push React Frontend
          echo "Building and pushing React Frontend..."
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag "${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/react-frontend:latest" \
            --target frontend-final \
            --push \
            .

          echo "Build and push completed!"


      # Deploy the application to the GKE cluster
      - name: Deploy to GKE
        run: |-
          kubectl apply -f k8s-manifest.yaml

      # Wait for deployment to complete
      - name: Wait for deployments to stabilize
        run: |-
          kubectl rollout status deployment/react-frontend
          kubectl rollout status deployment/spring-backend

      # Output the public IP address
      - name: Get service URLs
        run: |-
          echo "Frontend service available at: $(kubectl get service react-frontend -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"