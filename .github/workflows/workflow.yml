name: Deploy to GKE

on:
  push:
    branches:
      - master

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  GKE_CLUSTER: svelte-cluster
  GKE_ZONE: us-central1-a
  IMAGE_FRONTEND: svelte-frontend
  IMAGE_QUARKUS: backend-quarkus
  IMAGE_FLASK: flask-backend
#  IMAGE_DB: postgres-db
  REGION: us-central1
  REPOSITORY: workout-app

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          export_environment_variables: true

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Clean up old images
        run: |
          gcloud container images list-tags $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_FRONTEND --format='get(digest)' --filter='tag:latest' | xargs -I {} gcloud container images delete $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_FRONTEND@{} --quiet --force-delete-tags
          gcloud container images list-tags $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_QUARKUS --format='get(digest)' --filter='tag:latest' | xargs -I {} gcloud container images delete $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_QUARKUS@{} --quiet --force-delete-tags
          gcloud container images list-tags $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_FLASK --format='get(digest)' --filter='tag:latest' | xargs -I {} gcloud container images delete $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_FLASK@{} --quiet --force-delete-tags
#          gcloud container images list-tags $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_DB --format='get(digest)' --filter='tag:latest' | xargs -I {} gcloud container images delete $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_DB@{} --quiet --force-delete-tags

      - name: Configure Docker to use Google Cloud authentication
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      - name: Build images with Docker Compose
        run: |
          docker compose build
      - name: Tag and push images
        run: |
          docker tag ${IMAGE_QUARKUS}:latest ${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE_QUARKUS}:latest
          docker tag ${IMAGE_FLASK}:latest ${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE_FLASK}:latest
          docker tag ${IMAGE_FRONTEND}:latest ${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE_FRONTEND}:latest
          docker push ${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE_QUARKUS}:latest
          docker push ${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE_FLASK}:latest
          docker push ${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE_FRONTEND}:latest
#          docker push ${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE_DB}:latest
#          docker tag ${IMAGE_DB}:latest ${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE_DB}:latest

      - name: Create or Update Instacart Secret
        env:
          INSTACART_API_KEY: ${{ secrets.INSTACART_API_KEY }}
        run: |
          if [ -z "$INSTACART_API_KEY" ]; then
            echo "Error: INSTACART_API_KEY secret is not set in GitHub Secrets."
            exit 1
          fi
          kubectl create secret generic instacart-creds \
            --from-literal=api-key="$INSTACART_API_KEY" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to GKE
        run: |
          kubectl apply -f k8s-manifest.yaml

      - name: Force rollout restart
        if: success()
        run: |
          echo "Forcing rollout restart to pick up latest images..."
          kubectl rollout restart deployment/svelte-frontend
          kubectl rollout restart deployment/backend-quarkus
          kubectl rollout restart deployment/flask-backend
#          kubectl rollout restart deployment/postgres-db

      - name: Wait for deployments to stabilize
        run: |
          kubectl rollout status deployment/svelte-frontend
          kubectl rollout status deployment/backend-quarkus
          kubectl rollout status deployment/flask-backend
#          kubectl rollout status deployment/postgres-db

      - name: Get service URLs
        run: |
          echo "Frontend service available at: $(kubectl get service svelte-frontend -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"